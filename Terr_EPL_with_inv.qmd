---
title: "Terrestrial Ecosystem Protection Level 2023 - including combined invasive plant data"
author: "SANBI"
date: MArch 2025
format: 
 html:
  toc: true
  toc-location: left
  embed-resources: true
editor: visual
execute: 
  eval: false
---

### Approach

Terrestrial Ecosystem Protection Level assessment with the inclusion of additional steps to utilise combined invasive alien plant data. This assessment is for 2023 only and highlights ecosystem types for which protection within the PA network is compromised by dense invasive alien plant occurrence.

```{r}

# Add packages: 
library(terra)
library(tidyverse)
library(PROJ) # seems to be required due to a conflict with postgres on some machines
 
```

### Data sources & import:

The 7 class South African National Land Cover data set for 2022 (prepared by SANBI based on National Department of Forestry, Fisheries and the Environment SACALC data) was combined with invasive alien plant data from various sources described in the following workflow: [INV_terr /Invasives_combined.qmd](https://github.com/askowno/INV_terr/blob/main/Invasives_combined.qmd), and resulting in a 8 class national land cover.

This 8 class land cover was cross tabulated with the National Vegetation Map 2024 version, vector data (ESRI file geodatabase) January 2025 curated by SANBI [@rutherford2006; @Dayaram2019] and th Protected Areas vector feature geodatabase prepared by SANBI, built from Protected and Conserved Areas (PACA) database curated by South Africa's National Department of Forestry Fisheries and the Environment. It is a flattened spatial layer with no overlaps (PACA is not flattened and has overlapping features representing each legal declaration and declaration, and separate features for additional assignments such as World Heritage Site status. This data also includes numerous defacto PAs, the information for which was provided by government Conservation authorities. SAPAD 2024Q4 (March 2025) data used.

```{r}
#Add land cover data  (note all LC products use  WGS84 Albers Equal Area, central meridian = 25; std parallel1 = -24; std parallel2 = -33). Use Tif version as this is processed faster by R terra.
lc2022_inv <- rast("C:/Users/skownoa/Dropbox/NBAwork/RLEworking/Invasives/lc2022_inv.tif")

# add vegetation data
veg <- vect("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", "NVM2024Final_IEM5_12_07012025")  #ensure it uses proj =  wgs84 aea cm 25 -24 -33

# to help differentiate masked areas (LES and SWA) from NON TERRESTRIAL areas add "NOTVEG" to T_MAPCODE where T_NAME = "Non-Terrestrial*"
veg$T_MAPCODE <- ifelse(veg$T_Name == "Non-terrestrial (estuarine habitat)" | veg$T_Name == "Non-terrestrial (Aquatic)", "NOTVEG", veg$T_MAPCODE) 

vegrast <- rasterize(veg,lc2022_inv,"T_MAPCODE")

#add PA data
pa <- vect("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", "SANBI_PA_2024Q4_Mar2025") #ensure it uses proj =  wgs84 aea cm 25 -24 -33 
```

### Mask out Lesotho and Eswatini

To ensure the statistics on land cover change are applicable to South Africa the countries of Lesotho and Eswatini (which are covered by the input LC and VEG data above) need to be masked out. For RLE processes these are left in the workflow as the statistics need to be applicable to whole vegetation types.

```{r}
# import a polygon  of  Eswatini and Lesotho then make a raster mask from this and apply to vegmap so the stats generated are National Statistics

esw_les <- vect("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_change.gdb", "mask_esw_les") #ensure it uses proj =  wgs84 aea cm 25 -24 -33

mask_esw_les <- rasterize(esw_les, vegrast, "CODE")
mask_esw_les <- (mask_esw_les =="LeS") # had to do this as just using mask raster doe snot work for some reason

vegrast_masked <- mask(vegrast, mask_esw_les, maskvalue=TRUE) # check if this changes the extent? if so use below to correct

```

### Data preparation:

Subset PA data for 2023 using DECL_YEAR, excluding properties degazetted using UNDECL_YEA. In preparation for this selection Decl_year is set to 0 when unknown, and Undecl_year is set to 9999 for those PAs not ever degazetted.

Rasterize PA layers at each time point, using PA SUBTYPE attribute, and snapping to the land cover grid.

```{r}

#Data preparation

# Create PA vectors for each time point
pa2023 <- subset(pa, pa$DECL_YEAR <  2024 & pa$UNDECL_YEA >2023)
# Create PA rasters
pr2023 <- rasterize(pa2023,lc2022_inv,"SUBTYPE") 

```

### Analysis:

*Cross-tabulate land cover (including invasives) with vegetation and protected areas.*

Stack the land cover for each time period with the corresponding PA data and the vegetation data.

Cross-tabulate the raster stack. It is crucial to use the NA values in the cross tabulation as this will help with tracking LC outside of the PA network - this is because the PA vector and hence the raster is not continuous (not a wall to wall map) and there is no data between PA features.

```{r}

# Step 3. Crosstabulate vegetation, land cover and PA. Align the land cover time point with the PA time point as far as possible 
 
tb2023 <- as_tibble(crosstab(c(lc2022_inv,vegrast_masked,pr2023),useNA=TRUE))
tb2023 <- tb2023 %>% add_column(YEAR =2023) %>% rename(LC = nlc2022_7class) 
write.csv(tb2023, file = "outputs/sa_pa2023_inv.csv")

```

*Prepare analysis tables*

```{r}
# Build up the tables  required to compute EPL 

options(scipen = 999)
# clean up the results of the cross tabulation 
tb2023 <- read.csv("C:/Rdata/EPL_terr/outputs/sa_pa2023_inv.csv") # read in data to avoid cross tab
tb2023 <- tb2023 %>%
  filter(n != 0, !is.na(LC), LC != "NaN", LC != 0,!is.na(T_MAPCODE)) %>% 
  mutate(SUBTYPE = if_else(SUBTYPE == "" | is.na(SUBTYPE), "NOTPA", SUBTYPE)) %>% # Non PA pixels we want to keep for the stats
         mutate(km2 = (n*400)/1000000, #change to 400 without aggregation
         LC_text = ifelse(LC==1, "Nat", ifelse(LC==8, "Inv", "Notnat")),
         BIOME = str_replace_all(T_MAPCODE, 
                                  c("AT.*" = "Albany Thicket", 
                                    "AZ.*" = "Azonal", 
                                    "CB.*" = "IOCB", 
                                    "D.*"  = "Desert", 
                                    "FF.*" = "Fynbos", 
                                    "FR.*" = "Fynbos",
                                    "FS.*" = "Fynbos",
                                    "FO.*" = "Forest", 
                                    "G.*"  = "Grassland",  
                                    "NK.*" = "Nama-Karoo", 
                                    "SK.*" = "Succulent Karoo",
                                    "SV.*" = "Savanna",
                                    "NOTVEG.*" = "NOTVEG")),
         TYPE = str_replace_all(SUBTYPE, 
                                c("FNR.*" = "FNR", 
                                  "FWA.*" = "FWA", 
                                  "MCA.*" = "MCA", 
                                  "NP.*" = "NP", 
                                  "MPA.*" = "MPA",
                                  "NR.*" = "NR", 
                                  "PE.*" = "PE", 
                                  "SNR.*" = "SNR", 
                                  "WHS.*" = "WHS",
                                  "NOTPA.*" = "NOTPA")))%>%
  relocate(LC, .after = T_MAPCODE)%>%
  relocate(LC_text, .after = LC)%>%
  relocate(BIOME, .after = T_MAPCODE) %>%
  relocate(km2, .after = n)%>%
  relocate(TYPE, .after = SUBTYPE)%>%
  relocate(YEAR, .after = TYPE)

# make a datatable from the vegsa, then extract CONSTARGETS for EPL computation
tb_tar <- as_tibble(veg)
tb_tar <- tb_tar %>% 
  select(c(T_MAPCODE, T_CNSRV_TRGT)) %>%
  distinct(T_MAPCODE, T_CNSRV_TRGT) %>%
  filter(T_MAPCODE != "NOTVEG", T_MAPCODE != "", T_MAPCODE != "<Null>", T_MAPCODE != "Gd9") %>%
  rename(tar_sa = T_CNSRV_TRGT) %>%
  mutate(tar_gbf = 30)
  
#  table of full extent per type
tb_veg <- tb2023 %>%
  filter(T_MAPCODE != "NOTVEG") %>%
  group_by(T_MAPCODE) %>%
  summarise(ext_veg = sum(km2),.groups = 'drop')

# table of full exent within in pa per type  
tb_vegpa <- tb2023 %>%
 filter(TYPE != "NOTPA",T_MAPCODE != "NOTVEG") %>%
  group_by(T_MAPCODE) %>%
  summarise(ext_vegpa = sum(km2),.groups = 'drop') 

# table of veg remnants within PA excluding invasives - this should be the same as time series EPL calc.
tb_vegrempa_exclinv <- tb2023 %>%
 filter(TYPE != "NOTPA",T_MAPCODE != "NOTVEG", LC_text == "Nat") %>%
  group_by(T_MAPCODE) %>%
  summarise(ext_vegrempa_exclinv = sum(km2),.groups = 'drop') 

# table of veg remnants within PA excluding invasives - this the is new analysis 
tb_vegrempa_inclinv <- tb2023 %>%
 filter(TYPE != "NOTPA", T_MAPCODE != "NOTVEG", LC_text != "Notnat") %>%
  group_by(T_MAPCODE) %>%
  summarise(ext_vegrempa_inclinv = sum(km2),.groups = 'drop') 

# join up the tables and calculate EPL
epl2023 <- tb_tar %>%
  left_join(tb_veg, by = "T_MAPCODE") %>%
  left_join(tb_vegpa, by = "T_MAPCODE") %>%
  left_join(tb_vegrempa_inclinv, by = "T_MAPCODE") %>%
  left_join(tb_vegrempa_exclinv, by = "T_MAPCODE") %>%
    mutate(across(everything(), ~ replace_na(.x, 0))) %>%
    mutate(prppa = ext_vegpa/ext_veg) %>%
    # make targets km2
    mutate(ext_tar_sa = tar_sa/100 * ext_veg, 
           ext_tar_gbf = tar_gbf/100 * ext_veg) %>%
    #calc EPL  rounding proportions to 3 decimal places
    mutate(epl_base = ifelse(ext_vegpa >= ext_tar_sa, "WP", 
                             ifelse(ext_vegpa >= ext_tar_sa*0.5, "MP", 
                                    ifelse(ext_vegpa >= ext_tar_sa*0.05, "PP", "NP" )))) %>%
  mutate(epl_nat = ifelse(ext_vegrempa_inclinv >= ext_tar_sa, "WP", 
                             ifelse(ext_vegrempa_inclinv >= ext_tar_sa*0.5, "MP", 
                                    ifelse(ext_vegrempa_inclinv >= ext_tar_sa*0.05, "PP", "NP" )))) %>%
  mutate(epl_nat_exclinv = ifelse(ext_vegrempa_exclinv >= ext_tar_sa, "WP", 
                             ifelse(ext_vegrempa_exclinv >= ext_tar_sa*0.5, "MP", 
                                    ifelse(ext_vegrempa_exclinv >= ext_tar_sa*0.05, "PP", "NP" ))))
 
#export the results of the adjusted EPL (epl_nat_exclinv is th enew data to compare to the standard EPL)
write.csv(epl2023, file = "outputs/results_df_EPL_2023_invasives.csv") #export results 
```

*Calculate biome level summary of EPL adjusted for invasives*

```{r}

#summarise EPL per biome
epl2023inv_sum <- epl2023 %>%
  mutate(BIOME = str_replace_all(T_MAPCODE, 
                                  c("AT.*" = "Albany Thicket", 
                                    "AZ.*" = "Azonal", 
                                    "CB.*" = "IOCB", 
                                    "D.*"  = "Desert", 
                                    "FF.*" = "Fynbos", 
                                    "FR.*" = "Fynbos",
                                    "FS.*" = "Fynbos",
                                    "FO.*" = "Forest", 
                                    "G.*"  = "Grassland",  
                                    "NK.*" = "Nama-Karoo", 
                                    "SK.*" = "Succulent Karoo",
                                    "SV.*" = "Savanna",
                                    "NOTVEG.*" = "NOTVEG"))) %>%
  group_by(BIOME,epl_nat_exclinv) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = epl_nat_exclinv, 
              values_from = count, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   bind_rows(
     summarise(., across(WP:NP, \(x) sum(x, na.rm = TRUE))%>%
       mutate(BIOME = "TOTAL")))

write.csv(epl2023inv_sum, file = "outputs/results_df_EPL_2023_biome_invasives.csv") #export results 

```
